################################
# Logistic regression training #
################################

#### Setting up data ####
spam <- read.csv("~/ST903/spambase/spambase.data", header=FALSE)
# Load data call it "spam"

# V58 is y
summary(spam)
# data documentation says no missing values

set.seed(1620789)
smp_size <- sample(nrow(spam), 3000)
train <- spam[smp_size,]

library(ggplot2)
test <- spam[-smp_size,]
test <- test[1:1000,]
Status.test = spam[smp_size, "response"]

#####################
# Fitting the model #
#####################
 dependent variable - vector of 3000
y <- train$V58

n <- nrow(train)
# matix of covariates
X <- train[1:57]
# add a column of ones for an intercept
Int <- rep(1, 3000)
X$Int <- Int
X<- as.matrix(sapply(X, as.numeric))

# m = 1 in this case. 1x3000 vector of ones. 
m <- rep(1, 3000)

# number of regression coefficients - intercept
r <- ncol(X) - 1 
# defining initial beta guesses
beta_new <- c(log(sum(y) / sum(m - y)), rep(0, r))

# Fisher scoring function fron another code in this repository.
classifier <- classifier <- Fisher_scoring(X, y, m, beta_new, maxiter=50,
delta.betas = 0.5)
classifier

true.fit <- glm( y~X, family = binomial)
summary(true.fit)
#Gives the same results but converges faster

#####################################################
# Predicting the class and analysing the efficiency #
#####################################################
 
# extracting MLE coefficients - 1x58 matrix
beta.MLE <- classifier$beta.MLE

# matix of covariates
X_test <- test[1:57]
Int <- rep(1, 1000)
X_test$Int <- Int
X_test <- as.matrix(sapply(X_test, as.numeric))

#logistic function from another code in this repostory
test_pred <- logistic(X_test, beta.MLE)

# Results
length(test_pred[test_pred<0.5])
# 425
length(test_pred[test_pred>=0.5])
# 575

y_test <- test$V58
y_test_f <- factor(y_test)
summary(y_test_f)
# non-spam - 365, spam - 635

compare <- data.frame(y_test)
compare$probability <- test_pred
compare$yhat <- cut(compare$probability, breaks=c(0, 0.5, 1), labels=c(0, 1))
compare$hat <- as.numeric(as.character(compare$yhat))
compare$error <- compare$y_test - compare$hat

length(compare$error[compare$error!=0])
# 85
length(compare$error[compare$error==1])
# 68
length(compare$error[compare$error==-1])
# 18


